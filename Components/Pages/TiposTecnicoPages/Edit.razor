@page "/Tipo/Edit/{TipoId:int}"
@inject TiposTecnicoService tiposTecnicoService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<EditForm Model="TipoTecnico" OnValidSubmit="Modificar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header bg-warning text-center">
            <h1>Editar Tipo de T&eacute;cnico</h1>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-4">
                    <label>ID:</label>
                    <div class="input-group">
                        <InputNumber min="0" @bind-Value="TipoTecnico!.TipoId" class="form-control" READONLY></InputNumber>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md">
                    <label>Descripci&oacute;n:</label>
                    <InputText @bind-Value="TipoTecnico.Descripcion" class="form-control"></InputText>
                    <ValidationMessage For="@(() => TipoTecnico.Descripcion)" />
                </div>
            </div>
            <div class="row">
                <div class="col-md">
                    <label>Incentivo:</label>
                    <InputNumber @bind-Value="TipoTecnico.Incentivo" class="form-control" Readonly></InputNumber>
                    <ValidationMessage For="@(() => TipoTecnico.Incentivo)" />
                </div>
            </div>
            <br />
            <div class="card-footer text-center">
                <button type="submit" class="btn btn-success">Modificar <i class="bi bi-floppy-fill" /></button>
                <button type="button" class="btn btn-outline-primary" @onclick="Volver">Volver <i class="bi bi-arrow-return-left" /></button>
            </div>
        </div>
    </div>
    <Toasts class="p-5" Messages="Mensaje" Placement="ToastsPlacement.TopRight" />
</EditForm>

@code {
    [Parameter]
    public int TipoId { get; set; }
    public TiposTecnicos? TipoTecnico { get; set; } = new TiposTecnicos();
    public List<TiposTecnicos> ListaTipos { get; set; } = new List<TiposTecnicos>();
    private bool HayTipo = false;
    List<ToastMessage> Mensaje = new List<ToastMessage>();

    protected override async Task OnInitializedAsync()
    {
        TipoTecnico!.TipoId = TipoId;
        TipoTecnico = await tiposTecnicoService.Buscar(TipoTecnico.TipoId);
        ListaTipos = await tiposTecnicoService.ListarTotal();
    }
    private void MostrarMensaje(ToastType toastType, string mensaje)
    {
        Mensaje.Add(CreateToastMenssage(toastType, mensaje));
    }
    private ToastMessage CreateToastMenssage(ToastType toastType, string mensaje) => new ToastMessage
        {
            Type = toastType,
            Title = "Notificación",
            HelpText = $"{DateTime.Now}",
            Message = mensaje,
        };
    private async Task<bool> Validar()
    {
        HayTipo = await tiposTecnicoService.Existe(TipoTecnico!.TipoId, TipoTecnico.Descripcion);
        return !HayTipo;
    }
    public async Task Modificar()
    {
        if (!await Validar())
        {
            MostrarMensaje(ToastType.Warning, $"Ya existe un TipoTécnico con Descripcion: {TipoTecnico.Descripcion}.");
            return;
        }
        var guardo = await tiposTecnicoService.Guardar(TipoTecnico!);
        if (guardo)
        {
            MostrarMensaje(ToastType.Warning, $"Se Guardaron los datos correctamente.");
            await Volver();
        }
        else
            MostrarMensaje(ToastType.Warning, $"Ha ocurrido un error.");
    }
    public Task Volver()
    {
        NavigationManager.NavigateTo("/Tipo/Index");
        return Task.CompletedTask;
    }
}