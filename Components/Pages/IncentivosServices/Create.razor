@page "/Incentivo/Create/"
@inject IncentivoService incentivoService
@inject TecnicoService tecnicoService
@inject IJSRuntime jsRuntime
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

@*Validacio al guardar*@
<EditForm Model="Incentivo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header bg-warning text-center">
            <h1>Crear Incentivo</h1>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-3">
                    <label>ID:</label>
                    <div class="input-group">
                        <InputNumber min="0" @bind-Value="Incentivo.IncentivoId" class="form-control" READONLY></InputNumber>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-3">
                    <label>Fecha:</label>
                    <InputDate @bind-Value="Incentivo.Fecha" class="form-control" format="yyyy-MM-ddTHH:mm" />
                    <ValidationMessage For="@(() => Incentivo.Fecha)" />
                </div>
            </div>
            <div class="col-md-3">
                <label>T&eacute;cnico:</label>
                <InputSelect @bind-Value="Incentivo.TecnicoId" class="form-control">
                    <option value="0">Seleccione un T&eacute;cnico</option>
                    @foreach (var Tecnico in ListTecnicos)
                    {
                        <option value="@Tecnico.TecnicoId">@Tecnico.Nombres</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Incentivo.TecnicoId)" />
            </div>
            <div class="row">
                <div class="col-md">
                    <label>Descripci&oacute;n:</label>
                    <InputText @bind-Value="Incentivo.Descripcion" class="form-control"></InputText>
                    <ValidationMessage For="@(() => Incentivo.Descripcion)" />
                </div>
            </div>
            <div class="row">
                <div class="col-md">
                    <label>Cantidad Servicios:</label>
                    <InputNumber min="0" @bind-Value="Incentivo.CantidadServicios" class="form-control"></InputNumber>
                    <ValidationMessage For="@(() => Incentivo.CantidadServicios)" />
                </div>
            </div>
            <div class="row">
                <div class="col-md">
                    <label>Monto:</label>
                    <InputNumber @bind-Value="Incentivo.Monto" class="form-control"></InputNumber>
                    <ValidationMessage For="@(() => Incentivo.Monto)" />
                </div>
            </div>
            <br />
            <div class="card-footer text-center">
                <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span> Nuevo </button>
                <button type="submit" class="btn btn-success">Guardar <i class="bi bi-floppy-fill" /></button>
                <button type="button" class="btn btn-outline-primary" @onclick="Volver">Volver <i class="bi bi-arrow-return-left" /></button>
            </div>
        </div>
    </div>
    <Toasts class="p-5" Messages="Mensaje" Placement="ToastsPlacement.TopRight" />
</EditForm>

@code {
    [Parameter]
    public int IncentivoId { get; set; }
    public Incentivos Incentivo { get; set; } = new Incentivos();
    public List<Incentivos> ListIncentivos { get; set; } = new List<Incentivos>();
    public List<Tecnicos> ListTecnicos { get; set; } = new List<Tecnicos>();
    private bool HayIncentivo = false;
    List<ToastMessage> Mensaje = new List<ToastMessage>();


    protected override async Task OnInitializedAsync()
    {
        Incentivo.Fecha = DateTime.Today;
        ListTecnicos = await tecnicoService.Listar(t => true);
    }
    private void MostrarMensaje(ToastType toastType, string mensaje)
    {
        Mensaje.Add(CreateToastMenssage(toastType, mensaje));
    }
    private ToastMessage CreateToastMenssage(ToastType toastType, string mensaje) => new ToastMessage
    {
        Type = toastType,
        Title = "Notificación",
        HelpText = $"{DateTime.Now}",
        Message = mensaje,
    };
    public async Task<bool> Validar()
    {
        HayIncentivo = await incentivoService.Existe(Incentivo.IncentivoId, Incentivo.Descripcion);
        return !HayIncentivo;
    }
    public async Task Guardar()
    {
        if (!await Validar())
        {
            MostrarMensaje(ToastType.Warning, $"Ya existe un incentivo con descripción: {Incentivo.Descripcion}.");
            return;
        }
        var guardo = await incentivoService.Guardar(Incentivo);
        if (guardo)
        {
            MostrarMensaje(ToastType.Warning, $"Se Guardaron los datos correctamente.");
        }
        else
            MostrarMensaje(ToastType.Warning, $"Ha ocurrido un error.");
    }
    public Task Volver()
    {
        NavigationManager.NavigateTo("/Incentivo/Index");
        return Task.CompletedTask;
    }
    public Task Nuevo()
    {
        Incentivo = new Incentivos();
        HayIncentivo = false;
        return Task.CompletedTask;
    }
}
