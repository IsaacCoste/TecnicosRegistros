@page "/Tecnico/Edit/{TecnicoId:int}"
@inject TecnicoService tecnicoService
@inject TiposTecnicoService tiposTecnicoService
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

@*Validacio al guardar*@
<EditForm Model="Tecnico" OnValidSubmit="Modificar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header bg-warning text-center">
            <h1>Editar T&eacute;cnico</h1>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-4">
                    <label>ID:</label>
                    <div class="input-group">
                        <InputNumber min="0" @bind-Value="Tecnico.TecnicoId" class="form-control" READONLY></InputNumber>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md">
                    <label>Nombre:</label>
                    <InputText @bind-Value="Tecnico.Nombres" class="form-control"></InputText>
                    <ValidationMessage For="@(() => Tecnico.Nombres)" />
                </div>
            </div>
            <div class="row">
                <div class="col-md">
                    <label>Sueldo Hora:</label>
                    <InputNumber @bind-Value="Tecnico.SueldoHora" class="form-control"></InputNumber>
                    <ValidationMessage For="@(() => Tecnico.SueldoHora)" />
                </div>
            </div>
            <div class="row">
                <div class="col-md">
                    <label>Tipos T&eacute;cnico</label>
                    <InputSelect @bind-Value="Tecnico.TipoId" class="form-control">
                        <option value="0">Seleccione el Tipo de T&eacute;cnico</option>
                        @foreach (var item in ListTipos)
                        {
                            <option value="@item.TipoId">@item.Descripción</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Tecnico.TipoId)" />
                </div>
            </div>
            <br />
            <div class="card-footer text-center">
                <button type="submit" class="btn btn-success">Modificar <i class="bi bi-floppy-fill" /></button>
                <button type="button" class="btn btn-outline-primary" @onclick="Volver">Volver <i class="bi bi-arrow-return-left" /></button>
            </div>
        </div>
        <p>@Notification</p>
    </div>
</EditForm>

@code {
    [Parameter]
    public int TecnicoId { get; set; }
    public Tecnicos Tecnico { get; set; } = new Tecnicos();
    public List<TiposTecnicos> ListTipos { get; set; } = new List<TiposTecnicos>();
    private bool HayTecnico = false;
    public string Notification { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Tecnico.TecnicoId = TecnicoId;
        Tecnico = await tecnicoService.Buscar(Tecnico.TecnicoId);
        ListTipos = await tiposTecnicoService.Listar(t => true);
    }
    public async Task<bool> Validar()
    {
        HayTecnico = await tecnicoService.Existe(Tecnico.TecnicoId, Tecnico.Nombres);
        return !HayTecnico;
    }
    public async Task Modificar()
    {
        if (!await Validar())
        {
            Notification = "Ya existe un técnico con este nombre.";
            return;
        }
        var guardo = await tecnicoService.Guardar(Tecnico);
        if (guardo)
        {
            Notification = "Se Guardo los datos correctamente";
            await Volver();
        }
    }
    public Task Volver()
    {
        NavigationManager.NavigateTo("/Tecnico/Index");
        return Task.CompletedTask;
    }
}