@page "/Tecnico/Create/"
@inject TecnicoService tecnicoService
@inject TiposTecnicoService tiposTecnicoSevice
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

<EditForm Model="Tecnico" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header bg-warning text-center">
            <h1>Crear T&eacute;cnico</h1>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-4">
                    <label>ID:</label>
                    <div class="input-group">
                        <InputNumber min="0" @bind-Value="Tecnico.TecnicoId" class="form-control" READONLY></InputNumber>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md">
                    <label>Nombre:</label>
                    <InputText @bind-Value="Tecnico.Nombres" class="form-control"></InputText>
                    <ValidationMessage For="@(() => Tecnico.Nombres)" />
                </div>
            </div>
            <div class="row">
                <div class="col-md">
                    <label>Sueldo Hora:</label>
                    <InputNumber @bind-Value="Tecnico.SueldoHora" class="form-control"></InputNumber>
                    <ValidationMessage For="@(() => Tecnico.SueldoHora)" />
                </div>
            </div>
            <div class="row">
                <div class="col-md">
                    <label>Descripci&oacute;n</label>
                    <InputSelect @bind-Value="Tecnico.TipoTecnicoId" class="form-control">
                        <option value="0">Seleccione el Tipo de T&eacute;cnico</option>
                        @foreach (var item in ListTipos)
                        {
                            <option value="@item.TipoId">@item.Descripcion</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Tecnico.TipoTecnicoId)" />
                </div>
            </div>
            <br />
            <div class="card-footer text-center">
                <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span> Nuevo </button>
                <button type="submit" class="btn btn-success">Guardar <i class="bi bi-floppy-fill" /></button>
                <button type="button" class="btn btn-outline-primary" @onclick="Volver">Volver <i class="bi bi-arrow-return-left" /></button>
            </div>
        </div>
    </div>
    <Toasts class="p-5" Messages="Mensaje" Placement="ToastsPlacement.TopRight" />
</EditForm>

@code {
    public Tecnicos Tecnico { get; set; } = new Tecnicos();
    public List<TiposTecnicos> ListTipos { get; set; } = new List<TiposTecnicos>();
    private bool HayTecnico = false;
    List<ToastMessage> Mensaje = new List<ToastMessage>();
    protected async override Task OnInitializedAsync()
    {
        ListTipos = await tiposTecnicoSevice.Listar(t => true);
    }
    private void MostrarMensaje(ToastType toastType, string mensaje)
    {
        Mensaje.Add(CreateToastMenssage(toastType, mensaje));
    }
    private ToastMessage CreateToastMenssage(ToastType toastType, string mensaje) => new ToastMessage
        {
            Type = toastType,
            Title = "Notificación",
            HelpText = $"{DateTime.Now}",
            Message = mensaje,
        };
    public async Task<bool> Validar()
    {
        HayTecnico = await tecnicoService.Existe(Tecnico.TecnicoId, Tecnico.Nombres);
        return !HayTecnico;
    }
    public async Task Guardar()
    {
        if (!await Validar())
        {
            MostrarMensaje(ToastType.Warning, $"Ya existe un Técnico con Nombre: {Tecnico.Nombres}.");
            return;
        }
        var guardo = await tecnicoService.Guardar(Tecnico);
        if (guardo)
        {
            MostrarMensaje(ToastType.Warning, $"Se Guardaron los datos correctamente.");
        }
        else
            MostrarMensaje(ToastType.Warning, $"Ha ocurrido un error.");
    }
    public Task Volver()
    {
        NavigationManager.NavigateTo("/Tecnico/Index");
        return Task.CompletedTask;
    }
    public Task Nuevo()
    {
        Tecnico = new Tecnicos();
        HayTecnico = false;
        return Task.CompletedTask;
    }
}