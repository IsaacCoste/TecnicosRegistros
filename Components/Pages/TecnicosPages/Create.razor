@page "/TecnicoCreate/"
@page "/TecnicoCreate/{TecnicoId:int}"
@inject TecnicosServices tecnicoservice
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

<EditForm Model="Tecnico" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card-header">
        <h1>Crear T&eacute;cnico</h1>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-4">
                <label>ID:</label>
                <div class="input-group">
                    <InputNumber min="0" @bind-Value="Tecnico.TecnicoId" class="form-control" READONLY></InputNumber>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <label>Nombre:</label>
                <InputText @bind-Value="Tecnico.Nombres" class="form-control"></InputText>
                <ValidationMessage For="@(() => Tecnico.Nombres)" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <label>Sueldo Hora:</label>
                <InputNumber @bind-Value="Tecnico.SueldoHora" class="form-control"></InputNumber>
                <ValidationMessage For="@(() => Tecnico.SueldoHora)" />
            </div>
        </div>
        <br />
        <div class="card-footer">
            <button type="submit" class="btn btn-success">Guardar <i class="bi bi-floppy-fill" /></button>
            <button type="button" class="btn btn-outline-primary" @onclick="Volver">Volver <i class="bi bi-arrow-return-left" /></button>
        </div>
    </div>
    <p>@Notification</p>
</EditForm>

@code {
    [Parameter]
    public int? TecnicoId { get; set; }
    public Tecnicos Tecnico { get; set; } = new Tecnicos();
    private bool HayTecnico = false;
    public string Notification { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (TecnicoId > 0)
        {
            Tecnico.TecnicoId = TecnicoId.Value;
            await Buscar();
        }
    }
    public async Task Buscar()
    {
        var TecnicoEncontrado = await tecnicoservice.Buscar(Tecnico.TecnicoId);

        if (TecnicoEncontrado != null)
        {
            Tecnico = TecnicoEncontrado;
        }
    }
    public async Task<bool> Validar()
    {
        var listaTecnico = await tecnicoservice
        .Listar(t => t.Nombres!
            .ToLower() == Tecnico.Nombres!
            .ToLower() && t.TecnicoId != Tecnico.TecnicoId);
        HayTecnico = listaTecnico.Any();
        return HayTecnico;
    }
    public async Task Guardar()
    {
        if (await Validar())
        {
            Notification = "Ya existe un técnico con este nombre.";
            return;
        }
        var guardo = await tecnicoservice.Guardar(Tecnico);
        if (guardo)
        {
            await Volver();
            Notification = "Se Guardo los datos correctamente";
        }
    }
    public Task Volver()
    {
        NavigationManager.NavigateTo("/TecnicoIndex");
        return Task.CompletedTask;
    }
}
